# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  DOCKER_IMAGE: your-dockerhub-username/ecommerce-api
  KUBE_NAMESPACE: ecommerce
  DOCKER_TLS_CERTDIR: "/certs"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_test
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        env:
          DJANGO_SETTINGS_MODULE: ecommerce.settings
          DATABASE_URL: postgresql://postgres:e-commerce@db.tslmzgiathzolqfolvpj.supabase.co:5432/postgres
          REDIS_URL: redis://localhost:6379/0
        run: |
          python -m pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/ -n ${{ env.KUBE_NAMESPACE }}

          # Update the deployment with the new image
          kubectl set image deployment/ecommerce-api \
            -n ${{ env.KUBE_NAMESPACE }} \
            ecommerce-api=${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Run migrations
        run: |
          kubectl rollout status deployment/ecommerce-api -n ${{ env.KUBE_NAMESPACE }} --timeout=90s
          kubectl exec -n ${{ env.KUBE_NAMESPACE }} deploy/ecommerce-api -- python manage.py migrate --noinput

      - name: Verify deployment
        run: |
          # Wait for the service to be ready
          kubectl rollout status deployment/ecommerce-api -n ${{ env.KUBE_NAMESPACE }} --timeout=90s
          # Add any additional verification steps here
